// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class NodeRegistered extends ethereum.Event {
  get params(): NodeRegistered__Params {
    return new NodeRegistered__Params(this);
  }
}

export class NodeRegistered__Params {
  _event: NodeRegistered;

  constructor(event: NodeRegistered) {
    this._event = event;
  }

  get nodeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardClaimed extends ethereum.Event {
  get params(): RewardClaimed__Params {
    return new RewardClaimed__Params(this);
  }
}

export class RewardClaimed__Params {
  _event: RewardClaimed;

  constructor(event: RewardClaimed) {
    this._event = event;
  }

  get nodeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StakeUpdated extends ethereum.Event {
  get params(): StakeUpdated__Params {
    return new StakeUpdated__Params(this);
  }
}

export class StakeUpdated__Params {
  _event: StakeUpdated;

  constructor(event: StakeUpdated) {
    this._event = event;
  }

  get nodeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UptimeRecorded extends ethereum.Event {
  get params(): UptimeRecorded__Params {
    return new UptimeRecorded__Params(this);
  }
}

export class UptimeRecorded__Params {
  _event: UptimeRecorded;

  constructor(event: UptimeRecorded) {
    this._event = event;
  }

  get nodeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minutesUp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Participation__nodesResult {
  value0: Address;
  value1: string;
  value2: BigInt;

  constructor(value0: Address, value1: string, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getMetadata(): string {
    return this.value1;
  }

  getRegisteredAt(): BigInt {
    return this.value2;
  }
}

export class Participation__statsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getUptime(): BigInt {
    return this.value0;
  }

  getLastUpdate(): BigInt {
    return this.value1;
  }

  getEarned(): BigInt {
    return this.value2;
  }
}

export class Participation extends ethereum.SmartContract {
  static bind(address: Address): Participation {
    return new Participation("Participation", address);
  }

  nextId(): BigInt {
    let result = super.call("nextId", "nextId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextId", "nextId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nodeStakes(param0: BigInt): BigInt {
    let result = super.call("nodeStakes", "nodeStakes(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nodeStakes(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nodeStakes", "nodeStakes(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nodes(param0: BigInt): Participation__nodesResult {
    let result = super.call(
      "nodes",
      "nodes(uint256):(address,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Participation__nodesResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toBigInt(),
    );
  }

  try_nodes(param0: BigInt): ethereum.CallResult<Participation__nodesResult> {
    let result = super.tryCall(
      "nodes",
      "nodes(uint256):(address,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Participation__nodesResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toBigInt(),
      ),
    );
  }

  stats(param0: BigInt): Participation__statsResult {
    let result = super.call(
      "stats",
      "stats(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Participation__statsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_stats(param0: BigInt): ethereum.CallResult<Participation__statsResult> {
    let result = super.tryCall(
      "stats",
      "stats(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Participation__statsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get nodeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class RecordUptimeCall extends ethereum.Call {
  get inputs(): RecordUptimeCall__Inputs {
    return new RecordUptimeCall__Inputs(this);
  }

  get outputs(): RecordUptimeCall__Outputs {
    return new RecordUptimeCall__Outputs(this);
  }
}

export class RecordUptimeCall__Inputs {
  _call: RecordUptimeCall;

  constructor(call: RecordUptimeCall) {
    this._call = call;
  }

  get nodeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minutesUp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecordUptimeCall__Outputs {
  _call: RecordUptimeCall;

  constructor(call: RecordUptimeCall) {
    this._call = call;
  }
}

export class RegisterNodeCall extends ethereum.Call {
  get inputs(): RegisterNodeCall__Inputs {
    return new RegisterNodeCall__Inputs(this);
  }

  get outputs(): RegisterNodeCall__Outputs {
    return new RegisterNodeCall__Outputs(this);
  }
}

export class RegisterNodeCall__Inputs {
  _call: RegisterNodeCall;

  constructor(call: RegisterNodeCall) {
    this._call = call;
  }

  get metadata(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RegisterNodeCall__Outputs {
  _call: RegisterNodeCall;

  constructor(call: RegisterNodeCall) {
    this._call = call;
  }
}

export class StakeToNodeCall extends ethereum.Call {
  get inputs(): StakeToNodeCall__Inputs {
    return new StakeToNodeCall__Inputs(this);
  }

  get outputs(): StakeToNodeCall__Outputs {
    return new StakeToNodeCall__Outputs(this);
  }
}

export class StakeToNodeCall__Inputs {
  _call: StakeToNodeCall;

  constructor(call: StakeToNodeCall) {
    this._call = call;
  }

  get nodeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeToNodeCall__Outputs {
  _call: StakeToNodeCall;

  constructor(call: StakeToNodeCall) {
    this._call = call;
  }
}
